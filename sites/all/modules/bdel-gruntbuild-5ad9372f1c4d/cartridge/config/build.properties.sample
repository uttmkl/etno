#
# The build.properties contains all information needed for a specific build and
# deployment. You should set this file up by copying the build.properties.template
# file to build.properties and customize for your needs.
#
# DO NOT CHECK build.properties INTO SOURCE CONTROL. Otherwise you will overwrite
# others properties which will screw up their builds. Best not to check in local
# build.properties.
#
#
#
# There are 3 options for running the grunt build task:
#
# Option 1
# Supply the repo path with tag/branch in build.properties like this:
# build.repo.paths=git@bitbucket.org:username/myrepo.git v1.2.2
# or:
# build.repo.paths=git@bitbucket.org:username/myproject.git v1.2,git@bitbucket.org:username/myintegration.git v1.0,git@bitbucket.org:username/myotherproject.git v2.3
# In this case you would issue the following command supplying a grunt option for the build version:
# grunt build --build=1.31.1
# This will build code version 1.31 based on git tag 1.2.2, or the git tag corresponding to each repo in the
# comma-separated list

# Option 2
# Supply only the repo path in build.properties like this:
# build.repo.paths=git@bitbucket.org:username/myrepo.git
# (This option assumes you are building off a single repo)
# In this case you would issue the following command supplying a grunt option for the build version and tag/branch:
# grunt build --build=1.31.1 --branch=1.2.2
# This will build code version 1.31 based on git tag 1.2.2

# Option 3
# Supply only the repo path in build.properties like this:
# build.repo.paths=git@bitbucket.org:username/myrepo.git
# or:
# build.repo.paths=git@bitbucket.org:username/myproject.git,git@bitbucket.org:username/myintegration.git,git@bitbucket.org:username/myotherproject.git
# If you issue the following command supplying ONLY the grunt option for the build version and OMITTING
# the tag/branch, it will assume that you want the master branch
# grunt build --build=1.31.1
# This will build code version 1.31 based on the master git branch for each repo in build.repo.paths

# PLEASE NOTE THAT OPTION 2 ASSUMES YOU ONLY HAVE A SINGLE REPO PROVIDED FOR build.repo.paths
# IF YOU ARE BUILDING FROM MULTIPLE, COMMA-SEPARATED REPOS YOU WILL NEED TO USE EITHER OPTION 1 or 3


# Git repo URIs
# Can take a comma-separated list like this:
#git@bitbucket.org:username/myproject.git v1.2,git@bitbucket.org:username/myintegration.git v1.0,git@bitbucket.org:username/myotherproject.git v2.3

# This property contains the details of your Demandware instance you will upload the site to.
# The property controls which environment file to select so the build will be looking for a file named:
#build.target.environment=STAGING


# Build configuration
#build.project.name=myproject
#build.project.user=username

# Mail settings for sending email after task complete.
# For example, send an email to QA after a new build is activated.
build.mail.username=myemailname@gmail.com
build.mail.password=mytopsecretemailpassword
build.mail.from=noreply@gruntbuilder.com
build.mail.tolist=somebody@mycompany.com,anotherdev@mycompany.com

# Use this property to control whether javascript files in the static files cartridge should
# be compressed or not.
#build.optimize.js=true

# Use this property to control whether css files in the static files cartridge should compressed
# or not.
#build.optimize.css=true


# Use this property to enable concatenation of js and css files
# Concatenation is done for the cartridges specified in static.files.cartridges
#static.files.concatenate=true

# This property specifies the directory on the local machine that
# all files generated by the build should be written to (no trailing slash).
# This directory path contains the "exports" and "output" directories
local.build.dir=/Users/username/build

# Path to your curl installation (no trailing slash)
local.curl.path=/usr/local/bin

# Use this property to control encryption of passwords in dependency files.
# If enabled, passwords will be automatically encrypted upon the first run of any major target.
# A DES key file will be written to ${local.build.temp}.
password.encryption=true

# Use this property to specify if 2-factor authentication is turned on in your staging instance.
# If enabled, the Upload tasks will upload using the secure 2-factor URL with the
# webdav.p12.path and webdav.p12.password values specified in the environment properties file.
twofactor.enabled=false


# This property specifies location path to the installed git executable.  (OPTIONAL)
# You can leave it to "git" when you have specified an environment variable for this.
# IMPORTANT: You need to setup the Git SSH key accordingly. Also you need to set up an environment variable (HOME=%USERPROFILE%)
# pointing to your Git home directory to make it possible for Git to find the SSH Key.
# See http://git-scm.com/book/en/Git-on-the-Server-Generating-Your-SSH-Public-Key
#git.executable.path=C:\\Program Files (x86)\\Git\\cmd\\git
git.executable.path=git

# This property will switch the command used for exporting from a Git repo from "clone" to "archive". (OPTIONAL)
# Archiving rather will result in a much faster export as cloning will download the whole repo including Git artifacts.
# Most Git hosts block archiving for http connections, and only allow it for ssh.
# Please check that your Git repository enables archiving before enabling.
# At time of writing BitBucket allows ssh archiving and GitHub does not allow it at all.
#git.archive.enabled=true
